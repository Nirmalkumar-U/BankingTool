{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { AppSettingsDto } from '../../dto/app-settings-dto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../local-storage.service\";\nimport * as i2 from \"../emitter.service\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(localStoreService, emitService) {\n      this.localStoreService = localStoreService;\n      this.emitService = emitService;\n      this.baseUrl = AppSettingsDto.baseUrl;\n      this.requestObj = (method = 'GET', headerType = 'DEFAULT', body) => {\n        return {\n          method,\n          headerType,\n          body\n        };\n      };\n    }\n    get(url, isLoading = true) {\n      return this.executeRequest(url, this.requestObj(methods.GET, methods.GET), isLoading);\n    }\n    post(url, body, isLoading = true) {\n      return this.executeRequest(url, this.requestObj(methods.POST, methods.POST, JSON.stringify(body)), isLoading);\n    }\n    executeRequest(url, requestObj, isLoading) {\n      return new Observable(observer => {\n        let requestInit = this.getFetchObject(requestObj);\n        if (isLoading) {\n          this.emitService.loaderEmitter.emit(true);\n        }\n        console.log(this.baseUrl + url);\n        fetch(this.baseUrl + url, requestInit).then(response => {\n          return this.handelResponse(response);\n        }).then(result => {\n          if (!result.status) {\n            //alart\n          }\n          if (isLoading) {\n            this.emitService.loaderEmitter.emit(false);\n          }\n          observer.next(result);\n          observer.complete();\n        }).catch(error => {\n          observer.error(error);\n          observer.complete();\n        });\n      });\n    }\n    getFetchObject(requestObj) {\n      let headers;\n      switch (requestObj.headerType) {\n        case methods.POST:\n          {\n            headers = this.postHeaders();\n            break;\n          }\n        case methods.GET:\n          {\n            headers = this.getHeaders();\n            break;\n          }\n        default:\n          {\n            headers = this.getHeaders();\n          }\n      }\n      let request = {\n        method: requestObj.method,\n        headers,\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer'\n      };\n      if (requestObj.body) {\n        request.body = requestObj.body;\n      }\n      return request;\n    }\n    getBaseHeaders() {\n      const token = this.localStoreService.getItem('accessToken');\n      let base = {};\n      if (token) {\n        base['Authorization'] = `Bearer ${token}`;\n      }\n      if (AppSettingsDto.apiKey) {\n        base['ApiKey'] = AppSettingsDto.apiKey;\n      }\n      return base;\n    }\n    getHeaders() {\n      let base = this.getBaseHeaders();\n      base.Accept = 'application/json';\n      base.Pragma = 'no-cache';\n      base['Cache-Control'] = 'no-cache';\n      return base;\n    }\n    postHeaders() {\n      let base = this.getBaseHeaders();\n      base.Accept = 'application/json';\n      base['Content-Type'] = 'application/json';\n      return base;\n    }\n    handelResponse(response) {\n      if (response.status == 403) {\n        return response.json();\n      } else if (!response || response.status === 204) {\n        return;\n      } else if (response && response.status >= 500) {\n        throw response;\n      } else {\n        return response.json();\n      }\n    }\n    static {\n      this.ɵfac = function HttpService_Factory(t) {\n        return new (t || HttpService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.EmitterService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: HttpService,\n        factory: HttpService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return HttpService;\n})();\nexport let methods = /*#__PURE__*/(() => {\n  class methods {\n    static {\n      this.GET = \"GET\";\n    }\n    static {\n      this.POST = \"POST\";\n    }\n    static {\n      this.PUT = \"PUT\";\n    }\n    static {\n      this.DELETE = \"DELETE\";\n    }\n  }\n  return methods;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
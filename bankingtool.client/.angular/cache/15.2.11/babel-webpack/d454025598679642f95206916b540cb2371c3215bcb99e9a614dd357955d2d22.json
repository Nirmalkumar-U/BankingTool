{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { isNullOrEmpty } from '../../core/commonFunction/common-function';\nlet AddEditUserComponent = class AddEditUserComponent {\n  constructor(activatedRoute, fb, userService) {\n    this.activatedRoute = activatedRoute;\n    this.fb = fb;\n    this.userService = userService;\n    this.stateDropDownList = [];\n    this.cityDropDownList = [];\n    this.roleDropDownList = [];\n    this.userForm = this.fb.group({\n      userId: [],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      state: ['', [Validators.required]],\n      city: ['', [Validators.required]],\n      role: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    const initialData = this.activatedRoute.snapshot.data['DataResolver'];\n    this.stateDropDownList = initialData.result.stateDropDown;\n    this.roleDropDownList = initialData.result.roleDropDown;\n    this.userForm.setValue({\n      userId: initialData.result.userDetail.userId,\n      email: initialData.result.userDetail.emailId,\n      password: initialData.result.userDetail.password,\n      firstName: initialData.result.userDetail.firstName,\n      lastName: initialData.result.userDetail.lastName,\n      state: initialData.result.userDetail.state,\n      city: initialData.result.userDetail.city,\n      role: initialData.result.userDetail.roleId\n    });\n    this.userForm.get('state')?.valueChanges.subscribe(stateValue => {\n      if (stateValue && stateValue != null) {\n        this.userService.getCityDropDownListByStateId(stateValue).subscribe(cityList => {\n          this.cityDropDownList = cityList;\n        });\n      } else {\n        this.cityDropDownList = [];\n      }\n    });\n  }\n  saveUser() {\n    if (!this.userForm.invalid) {\n      let isValid = true;\n      let user = this.userForm.value;\n      if (isNullOrEmpty(user.email)) isValid = false;\n      if (isNullOrEmpty(user.password)) isValid = false;\n      if (isNullOrEmpty(user.firstName)) isValid = false;\n      if (isNullOrEmpty(user.lastName)) isValid = false;\n      if (isNullOrEmpty(user.state)) isValid = false;\n      if (isNullOrEmpty(user.city)) isValid = false;\n      if (isNullOrEmpty(user.role)) isValid = false;\n      if (isValid) {\n        this.userService.saveUser(user).subscribe(cityList => {\n          this.cityDropDownList = cityList;\n        });\n      }\n    }\n  }\n};\nAddEditUserComponent = __decorate([Component({\n  selector: 'app-add-edit-user',\n  templateUrl: './add-edit-user.component.html',\n  styleUrls: ['./add-edit-user.component.css']\n})], AddEditUserComponent);\nexport { AddEditUserComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,aAAa,QAAQ,2CAA2C;AAYlE,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAK/BC,YAA6BC,cAA8B,EAAUC,EAAe,EAAUC,WAAwB;IAAzF,mBAAc,GAAdF,cAAc;IAA0B,OAAE,GAAFC,EAAE;IAAuB,gBAAW,GAAXC,WAAW;IAHzG,sBAAiB,GAAkB,EAAE;IACrC,qBAAgB,GAAkB,EAAE;IACpC,qBAAgB,GAAkB,EAAE;IAElC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC5BC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACU,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACW,QAAQ,CAAC,CAAC;MACrCE,SAAS,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACW,QAAQ,CAAC,CAAC;MACtCG,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACW,QAAQ,CAAC,CAAC;MACrCI,KAAK,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACW,QAAQ,CAAC,CAAC;MAClCK,IAAI,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACW,QAAQ,CAAC,CAAC;MACjCM,IAAI,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACW,QAAQ,CAAC;KACjC,CAAC;EACJ;EACAO,QAAQ;IACN,MAAMC,WAAW,GAAoC,IAAI,CAACf,cAAc,CAACgB,QAAQ,CAACC,IAAI,CAAC,cAAc,CAAC;IACtG,IAAI,CAACC,iBAAiB,GAAGH,WAAW,CAACI,MAAM,CAACC,aAAa;IACzD,IAAI,CAACC,gBAAgB,GAAGN,WAAW,CAACI,MAAM,CAACG,YAAY;IAEvD,IAAI,CAACnB,QAAQ,CAACoB,QAAQ,CAAC;MACrBlB,MAAM,EAAEU,WAAW,CAACI,MAAM,CAACK,UAAU,CAACnB,MAAM;MAC5CC,KAAK,EAAES,WAAW,CAACI,MAAM,CAACK,UAAU,CAACC,OAAO;MAC5CjB,QAAQ,EAAEO,WAAW,CAACI,MAAM,CAACK,UAAU,CAAChB,QAAQ;MAChDC,SAAS,EAAEM,WAAW,CAACI,MAAM,CAACK,UAAU,CAACf,SAAS;MAClDC,QAAQ,EAAEK,WAAW,CAACI,MAAM,CAACK,UAAU,CAACd,QAAQ;MAChDC,KAAK,EAAEI,WAAW,CAACI,MAAM,CAACK,UAAU,CAACb,KAAK;MAC1CC,IAAI,EAAEG,WAAW,CAACI,MAAM,CAACK,UAAU,CAACZ,IAAI;MACxCC,IAAI,EAAEE,WAAW,CAACI,MAAM,CAACK,UAAU,CAACE;KACrC,CAAC;IAEF,IAAI,CAACvB,QAAQ,CAACwB,GAAG,CAAC,OAAO,CAAC,EAAEC,YAAY,CAACC,SAAS,CAACC,UAAU,IAAG;MAC9D,IAAIA,UAAU,IAAIA,UAAU,IAAI,IAAI,EAAE;QACpC,IAAI,CAAC5B,WAAW,CAAC6B,4BAA4B,CAACD,UAAU,CAAC,CAACD,SAAS,CAAEG,QAAuB,IAAI;UAC9F,IAAI,CAACC,gBAAgB,GAAGD,QAAQ;QAClC,CAAC,CAAC;OACH,MAAM;QACL,IAAI,CAACC,gBAAgB,GAAG,EAAE;;IAE9B,CAAC,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,CAAC,IAAI,CAAC/B,QAAQ,CAACgC,OAAO,EAAE;MAC1B,IAAIC,OAAO,GAAG,IAAI;MAClB,IAAIC,IAAI,GAAgB,IAAI,CAAClC,QAAQ,CAACmC,KAAK;MAC3C,IAAIzC,aAAa,CAACwC,IAAI,CAAC/B,KAAK,CAAC,EAAE8B,OAAO,GAAG,KAAK;MAC9C,IAAIvC,aAAa,CAACwC,IAAI,CAAC7B,QAAQ,CAAC,EAAE4B,OAAO,GAAG,KAAK;MACjD,IAAIvC,aAAa,CAACwC,IAAI,CAAC5B,SAAS,CAAC,EAAE2B,OAAO,GAAG,KAAK;MAClD,IAAIvC,aAAa,CAACwC,IAAI,CAAC3B,QAAQ,CAAC,EAAE0B,OAAO,GAAG,KAAK;MACjD,IAAIvC,aAAa,CAACwC,IAAI,CAAC1B,KAAK,CAAC,EAAEyB,OAAO,GAAG,KAAK;MAC9C,IAAIvC,aAAa,CAACwC,IAAI,CAACzB,IAAI,CAAC,EAAEwB,OAAO,GAAG,KAAK;MAC7C,IAAIvC,aAAa,CAACwC,IAAI,CAACxB,IAAI,CAAC,EAAEuB,OAAO,GAAG,KAAK;MAC7C,IAAIA,OAAO,EAAE;QACX,IAAI,CAAClC,WAAW,CAACgC,QAAQ,CAACG,IAAI,CAAC,CAACR,SAAS,CAAEG,QAAuB,IAAI;UACpE,IAAI,CAACC,gBAAgB,GAAGD,QAAQ;QAClC,CAAC,CAAC;;;EAGR;CACD;AA9DYlC,oBAAoB,eALhCH,SAAS,CAAC;EACT4C,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACW3C,oBAAoB,CA8DhC;SA9DYA,oBAAoB","names":["Component","Validators","isNullOrEmpty","AddEditUserComponent","constructor","activatedRoute","fb","userService","userForm","group","userId","email","required","password","firstName","lastName","state","city","role","ngOnInit","initialData","snapshot","data","stateDropDownList","result","stateDropDown","roleDropDownList","roleDropDown","setValue","userDetail","emailId","roleId","get","valueChanges","subscribe","stateValue","getCityDropDownListByStateId","cityList","cityDropDownList","saveUser","invalid","isValid","user","value","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Nirmal Learning Projects\\BankingTool\\bankingtool.client\\src\\app\\component\\add-edit-user\\add-edit-user.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { isNullOrEmpty } from '../../core/commonFunction/common-function';\r\nimport { UserService } from '../../core/service/user.service';\r\nimport { DropDownDto } from '../../dto/drop-down-dto';\r\nimport { ResponseDto } from '../../dto/response-dto';\r\nimport { SaveUserDto } from '../../dto/save-user-dto';\r\nimport { UserInitialLoadDto } from '../../dto/user-initial-load-dto';\r\n\n@Component({\n  selector: 'app-add-edit-user',\n  templateUrl: './add-edit-user.component.html',\n  styleUrls: ['./add-edit-user.component.css']\n})\nexport class AddEditUserComponent implements OnInit {\n  userForm: FormGroup;\n  stateDropDownList: DropDownDto[] = [];\n  cityDropDownList: DropDownDto[] = [];\n  roleDropDownList: DropDownDto[] = [];\n  constructor(private readonly activatedRoute: ActivatedRoute, private fb: FormBuilder, private userService: UserService) {\n    this.userForm = this.fb.group({\n      userId: [],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      state: ['', [Validators.required]],\n      city: ['', [Validators.required]],\n      role: ['', [Validators.required]]\n    });\r\n  }\n  ngOnInit() {\r\n    const initialData: ResponseDto<UserInitialLoadDto> = this.activatedRoute.snapshot.data['DataResolver'];\r\n    this.stateDropDownList = initialData.result.stateDropDown;\r\n    this.roleDropDownList = initialData.result.roleDropDown;\r\n\r\n    this.userForm.setValue({\r\n      userId: initialData.result.userDetail.userId,\r\n      email: initialData.result.userDetail.emailId,\r\n      password: initialData.result.userDetail.password,\r\n      firstName: initialData.result.userDetail.firstName,\r\n      lastName: initialData.result.userDetail.lastName,\r\n      state: initialData.result.userDetail.state,\r\n      city: initialData.result.userDetail.city,\r\n      role: initialData.result.userDetail.roleId\r\n    });\r\n\r\n    this.userForm.get('state')?.valueChanges.subscribe(stateValue => {\n      if (stateValue && stateValue != null) {\n        this.userService.getCityDropDownListByStateId(stateValue).subscribe((cityList: DropDownDto[]) => {\n          this.cityDropDownList = cityList;\r\n        });\r\n      } else {\n        this.cityDropDownList = [];\r\n      }\n    });\r\n  }\n\n  saveUser() {\n    if (!this.userForm.invalid) {\r\n      let isValid = true;\r\n      let user: SaveUserDto = this.userForm.value;\r\n      if (isNullOrEmpty(user.email)) isValid = false;\r\n      if (isNullOrEmpty(user.password)) isValid = false;\r\n      if (isNullOrEmpty(user.firstName)) isValid = false;\r\n      if (isNullOrEmpty(user.lastName)) isValid = false;\r\n      if (isNullOrEmpty(user.state)) isValid = false;\r\n      if (isNullOrEmpty(user.city)) isValid = false;\r\n      if (isNullOrEmpty(user.role)) isValid = false;\r\n      if (isValid) {\r\n        this.userService.saveUser(user).subscribe((cityList: DropDownDto[]) => {\n          this.cityDropDownList = cityList;\r\n        });\r\n      }\r\n    }\r\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
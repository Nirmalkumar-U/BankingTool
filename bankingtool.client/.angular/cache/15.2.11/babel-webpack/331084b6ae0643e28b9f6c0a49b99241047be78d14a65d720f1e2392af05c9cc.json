{"ast":null,"code":"import { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/user.service\";\nexport class AddEditUserResolver {\n  //resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n  //  return of(true);\n  //}\n  constructor(userService) {\n    this.userService = userService;\n  }\n  resolve() {\n    return this.userService.getUserInitialLoad(null).pipe(catchError(error => {\n      return of(error);\n    }));\n  }\n  static {\n    this.ɵfac = function AddEditUserResolver_Factory(t) {\n      return new (t || AddEditUserResolver)(i0.ɵɵinject(i1.UserService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AddEditUserResolver,\n      factory: AddEditUserResolver.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAcC,EAAE,QAAQ,MAAM;;;AAMjD,OAAM,MAAOC,mBAAmB;EAC9B;EACA;EACA;EAEAC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAChDC,OAAO;IACL,OAAO,IAAI,CAACD,WAAW,CAACE,kBAAkB,CAAC,IAAI,CAAC,CAACC,IAAI,CACnDP,UAAU,CAAEQ,KAAK,IAAI;MAAG,OAAOP,EAAE,CAACO,KAAK,CAAC;IAAC,CAAC,CAAC,CAAC;EAChD;;;uBATWN,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAAO,SAAnBP,mBAAmB;MAAAQ,YAFlB;IAAM;EAAA","names":["catchError","of","AddEditUserResolver","constructor","userService","resolve","getUserInitialLoad","pipe","error","factory","providedIn"],"sourceRoot":"","sources":["D:\\Nirmal Learning Projects\\BankingTool\\bankingtool.client\\src\\app\\core\\resolver\\add-edit-user.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\nimport { catchError, Observable, of } from 'rxjs';\r\nimport { UserService } from '../service/user.service';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddEditUserResolver implements Resolve<any> {\n  //resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n  //  return of(true);\n  //}\n\n  constructor(private userService: UserService) { }\n  resolve(): Observable<any> {\n    return this.userService.getUserInitialLoad(null).pipe(\n      catchError((error) => { return of(error) }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class IndexedDbServiceService {\n  constructor() {}\n  initDb(dbName, dbVersion, primaryKey, tableName, columns) {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(dbName, dbVersion);\n      request.onerror = event => {\n        reject(`Createing ${dbName}: IndexedDB error: ${event}`);\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        const objectStore = db.createObjectStore(tableName, {\n          keyPath: primaryKey,\n          autoIncrement: true\n        });\n        columns.forEach(({\n          columnName,\n          isUnique\n        }) => objectStore.createIndex(columnName, columnName, {\n          unique: isUnique\n        }));\n      };\n      request.onsuccess = event => {\n        this.db = event.target.result;\n        resolve();\n      };\n    });\n  }\n  getAllData(tableName) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([tableName], 'readonly');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.getAll();\n      request.onerror = event => {\n        reject(`Get ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = event => {\n        resolve(request.result);\n      };\n    });\n  }\n  addData(tableName, data) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.add(data);\n      request.onerror = event => {\n        reject(`Add ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = event => {\n        resolve();\n      };\n    });\n  }\n  deleteData(tableName, id) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.delete(id);\n      request.onerror = event => {\n        reject(`Delete ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = event => {\n        resolve();\n      };\n    });\n  }\n  updateData(tableName, data) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.put(data);\n      request.onerror = event => {\n        reject(`Update ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = event => {\n        resolve();\n      };\n    });\n  }\n  clearData(tableName) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.clear();\n      request.onerror = event => {\n        reject(`Clear ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = event => {\n        resolve();\n      };\n    });\n  }\n  deleteDatabase(databaseName) {\n    return new Promise((resolve, reject) => {\n      const deleteRequest = indexedDB.deleteDatabase(databaseName);\n      deleteRequest.onsuccess = () => {\n        console.log('Database deleted successfully');\n        resolve();\n      };\n      deleteRequest.onerror = event => {\n        console.error('Error deleting database:');\n        reject(`Error deleting database: `);\n      };\n    });\n  }\n  static {\n    this.ɵfac = function IndexedDbServiceService_Factory(t) {\n      return new (t || IndexedDbServiceService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: IndexedDbServiceService,\n      factory: IndexedDbServiceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["IndexedDbServiceService","constructor","initDb","dbName","dbVersion","primaryKey","tableName","columns","Promise","resolve","reject","request","indexedDB","open","onerror","event","onupgradeneeded","db","target","result","objectStore","createObjectStore","keyPath","autoIncrement","forEach","columnName","isUnique","createIndex","unique","onsuccess","getAllData","transaction","getAll","addData","data","add","deleteData","id","delete","updateData","put","clearData","clear","deleteDatabase","databaseName","deleteRequest","console","log","error","factory","providedIn"],"sourceRoot":"","sources":["D:\\Nirmal Learning Projects\\BankingTool\\bankingtool.client\\src\\app\\core\\indexedDBService\\indexed-db-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDbServiceService {\n  constructor() { }\n  private db: IDBDatabase | undefined;\n\n  public initDb(dbName: string, dbVersion: number, primaryKey: string, tableName: string, columns: CreateIndexedDb[]): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const request = indexedDB.open(dbName, dbVersion);\n\n      request.onerror = (event) => {\n        reject(`Createing ${dbName}: IndexedDB error: ${event}`);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as any).result;\n        const objectStore = db.createObjectStore(tableName, { keyPath: primaryKey, autoIncrement: true });\n        columns.forEach(({ columnName, isUnique }) => objectStore.createIndex(columnName, columnName, { unique: isUnique }));\n      };\n\n      request.onsuccess = (event) => {\n        this.db = (event.target as any).result;\n        resolve();\n      };\n    });\n  }\n\n  public getAllData(tableName: string): Promise<any[]> {\n    return new Promise<any[]>((resolve, reject) => {\n      const transaction = this.db!.transaction([tableName], 'readonly');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.getAll();\n      request.onerror = (event) => {\n        reject(`Get ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = (event) => {\n        resolve(request.result);\n      };\n    });\n  }\n\n  public addData(tableName: string, data: any): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const transaction = this.db!.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.add(data);\n      request.onerror = (event) => {\n        reject(`Add ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = (event) => {\n        resolve();\n      };\n    });\n  }\n\n  public deleteData(tableName: string, id: number): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const transaction = this.db!.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.delete(id);\n      request.onerror = (event) => {\n        reject(`Delete ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = (event) => {\n        resolve();\n      };\n    });\n  }\n\n  public updateData(tableName: string, data: any): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const transaction = this.db!.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.put(data);\n      request.onerror = (event) => {\n        reject(`Update ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = (event) => {\n        resolve();\n      };\n    });\n  }\n\n  public clearData(tableName: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const transaction = this.db!.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.clear();\n      request.onerror = (event) => {\n        reject(`Clear ${tableName}: IndexedDB error: ${event}`);\n      };\n      request.onsuccess = (event) => {\n        resolve();\n      };\n    });\n  }\n  public deleteDatabase(databaseName: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const deleteRequest = indexedDB.deleteDatabase(databaseName);\n\n      deleteRequest.onsuccess = () => {\n        console.log('Database deleted successfully');\n        resolve();\n      };\n\n      deleteRequest.onerror = (event) => {\n        console.error('Error deleting database:');\n        reject(`Error deleting database: `);\n      };\n    });\n  }\n}\nexport interface CreateIndexedDb {\n  columnName: string;\n  isUnique: boolean;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
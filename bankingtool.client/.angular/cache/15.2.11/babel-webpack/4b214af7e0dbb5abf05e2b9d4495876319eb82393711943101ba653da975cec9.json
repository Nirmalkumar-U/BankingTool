{"ast":null,"code":"import { ClaimKey, Constant } from '../constant/constant';\nimport * as i0 from \"@angular/core\";\nexport class LocalStorageService {\n  constructor() {\n    if (!this.isLocalStorageAvailable()) {\n      console.error(\"LocalStorage is not available in this environment.\");\n    }\n  }\n  isLocalStorageAvailable() {\n    try {\n      const testKey = \"__test__\";\n      localStorage.setItem(testKey, testKey);\n      localStorage.removeItem(testKey);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  getItem(key) {\n    return localStorage.getItem(key);\n  }\n  setItem(key, value) {\n    localStorage.setItem(key, value);\n  }\n  removeItem(key) {\n    localStorage.removeItem(key);\n  }\n  clear() {\n    localStorage.clear();\n  }\n  getIsLoggedIn() {\n    return localStorage.getItem(ClaimKey.isLoggedIn) == Constant.true;\n  }\n  setIsLoggedIn(value) {\n    localStorage.setItem(ClaimKey.isLoggedIn, value.toString().toLocaleLowerCase());\n  }\n  setAllData(data) {\n    console.log(data);\n    data.forEach(item => {\n      this.setItem(item.key, item.value);\n    });\n  }\n  static {\n    this.ɵfac = function LocalStorageService_Factory(t) {\n      return new (t || LocalStorageService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LocalStorageService,\n      factory: LocalStorageService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,EAAEC,QAAQ,QAAQ,sBAAsB;;AAKzD,OAAM,MAAOC,mBAAmB;EAC9BC;IACE,IAAI,CAAC,IAAI,CAACC,uBAAuB,EAAE,EAAE;MACnCC,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAC;;EAEvE;EAEQF,uBAAuB;IAC7B,IAAI;MACF,MAAMG,OAAO,GAAG,UAAU;MAC1BC,YAAY,CAACC,OAAO,CAACF,OAAO,EAAEA,OAAO,CAAC;MACtCC,YAAY,CAACE,UAAU,CAACH,OAAO,CAAC;MAChC,OAAO,IAAI;KACZ,CAAC,OAAOI,CAAC,EAAE;MACV,OAAO,KAAK;;EAEhB;EAEAC,OAAO,CAACC,GAAW;IACjB,OAAOL,YAAY,CAACI,OAAO,CAACC,GAAG,CAAC;EAClC;EACAJ,OAAO,CAACI,GAAW,EAAEC,KAAa;IAChCN,YAAY,CAACC,OAAO,CAACI,GAAG,EAAEC,KAAK,CAAC;EAClC;EACAJ,UAAU,CAACG,GAAW;IACpBL,YAAY,CAACE,UAAU,CAACG,GAAG,CAAC;EAC9B;EACAE,KAAK;IACHP,YAAY,CAACO,KAAK,EAAE;EACtB;EACAC,aAAa;IACX,OAAOR,YAAY,CAACI,OAAO,CAACZ,QAAQ,CAACiB,UAAU,CAAC,IAAIhB,QAAQ,CAACiB,IAAI;EACnE;EAEAC,aAAa,CAACL,KAAc;IAC1BN,YAAY,CAACC,OAAO,CAACT,QAAQ,CAACiB,UAAU,EAAEH,KAAK,CAACM,QAAQ,EAAE,CAACC,iBAAiB,EAAE,CAAC;EACjF;EACAC,UAAU,CAACC,IAAW;IACpBlB,OAAO,CAACmB,GAAG,CAACD,IAAI,CAAC;IACjBA,IAAI,CAACE,OAAO,CAAEC,IAAI,IAAI;MACpB,IAAI,CAACjB,OAAO,CAACiB,IAAI,CAACb,GAAG,EAAEa,IAAI,CAACZ,KAAK,CAAC;IACpC,CAAC,CAAC;EACJ;;;uBA1CWZ,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAAyB,SAAnBzB,mBAAmB;MAAA0B,YAFlB;IAAM;EAAA","names":["ClaimKey","Constant","LocalStorageService","constructor","isLocalStorageAvailable","console","error","testKey","localStorage","setItem","removeItem","e","getItem","key","value","clear","getIsLoggedIn","isLoggedIn","true","setIsLoggedIn","toString","toLocaleLowerCase","setAllData","data","log","forEach","item","factory","providedIn"],"sourceRoot":"","sources":["D:\\Nirmal Learning Projects\\BankingTool\\bankingtool.client\\src\\app\\core\\local-storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ClaimKey, Constant } from '../constant/constant';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageService {\n  constructor() {\n    if (!this.isLocalStorageAvailable()) {\n      console.error(\"LocalStorage is not available in this environment.\");\n    }\n  }\n\n  private isLocalStorageAvailable(): boolean {\n    try {\n      const testKey = \"__test__\";\n      localStorage.setItem(testKey, testKey);\n      localStorage.removeItem(testKey);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  getItem(key: string) {\n    return localStorage.getItem(key);\n  }\n  setItem(key: string, value: string) {\n    localStorage.setItem(key, value);\n  }\n  removeItem(key: string) {\n    localStorage.removeItem(key);\n  }\n  clear() {\n    localStorage.clear();\n  }\n  getIsLoggedIn() {\n    return localStorage.getItem(ClaimKey.isLoggedIn) == Constant.true;\n  }\n\n  setIsLoggedIn(value: boolean) {\n    localStorage.setItem(ClaimKey.isLoggedIn, value.toString().toLocaleLowerCase());\n  }\n  setAllData(data: any[]) {\n    console.log(data);\n    data.forEach((item) => {\n      this.setItem(item.key, item.value)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
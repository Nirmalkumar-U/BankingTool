{"ast":null,"code":"import * as _ from 'lodash';\nimport { AppSettingsDto } from '../../dtos/app-settings-dto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./integrate.service\";\nexport class InitializerService {\n  constructor(_platformLocation, _appConfig) {\n    this._platformLocation = _platformLocation;\n    this._appConfig = _appConfig;\n  }\n  stripTrailingSlash(value) {\n    return value.replace(/\\/$/, \"\");\n  }\n  init() {\n    return () => {\n      return new Promise((resolve, reject) => {\n        let appBaseUrl = this.stripTrailingSlash(this.getDocumentOrigin() + this.getBaseHref());\n        console.log('appBaseUrl: ' + appBaseUrl);\n        this._appConfig.getAppConfiguration().subscribe(response => {\n          _.merge(AppSettingsDto, response);\n          resolve(true);\n        });\n      });\n    };\n  }\n  getBaseHref() {\n    let baseUrl = this._platformLocation.getBaseHrefFromDOM();\n    if (baseUrl && baseUrl == '/') {\n      baseUrl = '';\n    }\n    return baseUrl;\n  }\n  getDocumentOrigin() {\n    if (!document.location.origin) {\n      const port = document.location.port ? ':' + document.location.port : '';\n      return document.location.protocol + '//' + document.location.hostname + port;\n    }\n    return document.location.origin;\n  }\n  static {\n    this.ɵfac = function InitializerService_Factory(t) {\n      return new (t || InitializerService)(i0.ɵɵinject(i1.PlatformLocation), i0.ɵɵinject(i2.IntegrateService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InitializerService,\n      factory: InitializerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAGA,OAAO,KAAKA,CAAC,MAAM,QAAQ;AAC3B,SAASC,cAAc,QAAQ,6BAA6B;;;;AAK5D,OAAM,MAAOC,kBAAkB;EAC7BC,YACUC,iBAAmC,EACnCC,UAA4B;IAD5B,sBAAiB,GAAjBD,iBAAiB;IACjB,eAAU,GAAVC,UAAU;EAChB;EACGC,kBAAkB,CAACC,KAAa;IACrC,OAAOA,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACjC;EAEAC,IAAI;IACF,OAAO,MAAK;MACV,OAAO,IAAIC,OAAO,CAAU,CAACC,OAAO,EAAEC,MAAM,KAAI;QAC9C,IAAIC,UAAU,GAAG,IAAI,CAACP,kBAAkB,CAAC,IAAI,CAACQ,iBAAiB,EAAE,GAAG,IAAI,CAACC,WAAW,EAAE,CAAC;QACvFC,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGJ,UAAU,CAAC;QACxC,IAAI,CAACR,UAAU,CAACa,mBAAmB,EAAE,CAACC,SAAS,CAAEC,QAAa,IAAI;UAChEpB,CAAC,CAACqB,KAAK,CAACpB,cAAc,EAAEmB,QAAQ,CAAC;UACjCT,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;EACH;EAEQI,WAAW;IACjB,IAAIO,OAAO,GAAG,IAAI,CAAClB,iBAAiB,CAACmB,kBAAkB,EAAE;IAEzD,IAAID,OAAO,IAAIA,OAAO,IAAI,GAAG,EAAE;MAC7BA,OAAO,GAAG,EAAE;;IAGd,OAAOA,OAAO;EAChB;EAEQR,iBAAiB;IACvB,IAAI,CAACU,QAAQ,CAACC,QAAQ,CAACC,MAAM,EAAE;MAC7B,MAAMC,IAAI,GAAGH,QAAQ,CAACC,QAAQ,CAACE,IAAI,GAAG,GAAG,GAAGH,QAAQ,CAACC,QAAQ,CAACE,IAAI,GAAG,EAAE;MACvE,OACEH,QAAQ,CAACC,QAAQ,CAACG,QAAQ,GAAG,IAAI,GAAGJ,QAAQ,CAACC,QAAQ,CAACI,QAAQ,GAAGF,IAAI;;IAIzE,OAAOH,QAAQ,CAACC,QAAQ,CAACC,MAAM;EACjC;;;uBAzCWxB,kBAAkB;IAAA;EAAA;;;aAAlBA,kBAAkB;MAAA4B,SAAlB5B,kBAAkB;MAAA6B,YAFjB;IAAM;EAAA","names":["_","AppSettingsDto","InitializerService","constructor","_platformLocation","_appConfig","stripTrailingSlash","value","replace","init","Promise","resolve","reject","appBaseUrl","getDocumentOrigin","getBaseHref","console","log","getAppConfiguration","subscribe","response","merge","baseUrl","getBaseHrefFromDOM","document","location","origin","port","protocol","hostname","factory","providedIn"],"sourceRoot":"","sources":["D:\\Nirmal Learning Projects\\BankingTool\\bankingtool.client\\src\\app\\core\\initailizerService\\initializer.service.ts"],"sourcesContent":["import { PlatformLocation } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { IntegrateService } from './integrate.service';\r\nimport * as _ from 'lodash';\r\nimport { AppSettingsDto } from '../../dtos/app-settings-dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InitializerService {\r\n  constructor(\r\n    private _platformLocation: PlatformLocation,\r\n    private _appConfig: IntegrateService\r\n  ) { }\r\n  public stripTrailingSlash(value: string){\r\n    return value.replace(/\\/$/, \"\");\r\n  }\r\n  \r\n  init(): () => Promise<boolean> {\r\n    return () => {\r\n      return new Promise<boolean>((resolve, reject) => {\r\n        let appBaseUrl = this.stripTrailingSlash(this.getDocumentOrigin() + this.getBaseHref());\r\n        console.log('appBaseUrl: ' + appBaseUrl);\r\n        this._appConfig.getAppConfiguration().subscribe((response: any) => {\r\n          _.merge(AppSettingsDto, response);\r\n          resolve(true);\r\n        });\r\n      });\r\n    };\r\n  }\r\n  \r\n  private getBaseHref(): string {\r\n    let baseUrl = this._platformLocation.getBaseHrefFromDOM();\r\n  \r\n    if (baseUrl && baseUrl == '/') {\r\n      baseUrl = ''\r\n    }\r\n  \r\n    return baseUrl;\r\n  }\r\n  \r\n  private getDocumentOrigin(): string {\r\n    if (!document.location.origin) {\r\n      const port = document.location.port ? ':' + document.location.port : '';\r\n      return (\r\n        document.location.protocol + '//' + document.location.hostname + port\r\n      );\r\n    }\r\n  \r\n    return document.location.origin;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
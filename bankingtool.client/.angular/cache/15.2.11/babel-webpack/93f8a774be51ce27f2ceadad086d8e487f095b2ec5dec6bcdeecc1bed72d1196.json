{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class IntegrateService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAppConfiguration() {\n    return this.http.get('/AppSettings', {\n      headers: this.getWebAppApiHeaders()\n    });\n  }\n  getWebAppApiHeaders() {\n    let headers = new HttpHeaders();\n    headers = headers.append('skip', 'true');\n    return headers;\n  }\n  static {\n    this.ɵfac = function IntegrateService_Factory(t) {\n      return new (t || IntegrateService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: IntegrateService,\n      factory: IntegrateService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,gBAAgB;EAC3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAExCC,mBAAmB;IACjB,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAM,cAAc,EAAE;MAAEC,OAAO,EAAE,IAAI,CAACC,mBAAmB;IAAE,CAAE,CAAC;EACpF;EACAA,mBAAmB;IACjB,IAAID,OAAO,GAAG,IAAIN,WAAW,EAAE;IAC/BM,OAAO,GAAGA,OAAO,CAACE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC;IACxC,OAAOF,OAAO;EAChB;;;uBAVWL,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAAQ,SAAhBR,gBAAgB;MAAAS,YAFf;IAAM;EAAA","names":["HttpHeaders","IntegrateService","constructor","http","getAppConfiguration","get","headers","getWebAppApiHeaders","append","factory","providedIn"],"sourceRoot":"","sources":["D:\\Nirmal Learning Projects\\BankingTool\\bankingtool.client\\src\\app\\core\\initailizerService\\integrate.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IntegrateService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAppConfiguration(): Observable<any> {\r\n    return this.http.get<any>('/AppSettings', { headers: this.getWebAppApiHeaders() });\r\n  }\r\n  getWebAppApiHeaders() {\r\n    let headers = new HttpHeaders();\r\n    headers = headers.append('skip', 'true');\r\n    return headers;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
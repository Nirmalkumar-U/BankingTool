{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { AppSettingsDto } from '../../dto/app-settings-dto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../local-storage.service\";\nimport * as i2 from \"../emitter.service\";\nexport class HttpService {\n  constructor(localStoreService, emitService) {\n    this.localStoreService = localStoreService;\n    this.emitService = emitService;\n    this.baseUrl = AppSettingsDto.baseUrl;\n    this.requestObj = (method = 'GET', headerType = 'DEFAULT', body) => {\n      return {\n        method,\n        headerType,\n        body\n      };\n    };\n  }\n  get(url, isLoading = true) {\n    return this.executeRequest(url, this.requestObj(methods.GET, methods.GET), isLoading);\n  }\n  post(url, body, isLoading = true) {\n    return this.executeRequest(url, this.requestObj(methods.POST, methods.POST, JSON.stringify(body)), isLoading);\n  }\n  executeRequest(url, requestObj, isLoading) {\n    return new Observable(observer => {\n      let requestInit = this.getFetchObject(requestObj);\n      if (isLoading) {\n        this.emitService.loaderEmitter.emit(true);\n      }\n      console.log(this.baseUrl + url);\n      fetch(this.baseUrl + url, requestInit).then(response => {\n        return this.handelResponse(response);\n      }).then(result => {\n        if (!result.status) {\n          //alart\n        }\n        if (isLoading) {\n          this.emitService.loaderEmitter.emit(false);\n        }\n        observer.next(result);\n        observer.complete();\n      }).catch(error => {\n        observer.error(error);\n        observer.complete();\n      });\n    });\n  }\n  getFetchObject(requestObj) {\n    let headers;\n    switch (requestObj.headerType) {\n      case methods.POST:\n        {\n          headers = this.postHeaders();\n          break;\n        }\n      case methods.GET:\n        {\n          headers = this.getHeaders();\n          break;\n        }\n      default:\n        {\n          headers = this.getHeaders();\n        }\n    }\n    let request = {\n      method: requestObj.method,\n      headers,\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer'\n    };\n    if (requestObj.body) {\n      request.body = requestObj.body;\n    }\n    return request;\n  }\n  getBaseHeaders() {\n    const token = this.localStoreService.getItem('accessToken');\n    let base = {};\n    if (token) {\n      base['Authorization'] = `Bearer ${token}`;\n    }\n    if (AppSettingsDto.apiKey) {\n      base['ApiKey'] = AppSettingsDto.apiKey;\n    }\n    return base;\n  }\n  getHeaders() {\n    let base = this.getBaseHeaders();\n    base.Accept = 'application/json';\n    base.Pragma = 'no-cache';\n    base['Cache-Control'] = 'no-cache';\n    return base;\n  }\n  postHeaders() {\n    let base = this.getBaseHeaders();\n    base.Accept = 'application/json';\n    base['Content-Type'] = 'application/json';\n    return base;\n  }\n  handelResponse(response) {\n    if (response.status == 403) {\n      return response.json();\n    } else if (!response || response.status === 204) {\n      return;\n    } else if (response && response.status >= 500) {\n      throw response;\n    } else {\n      return response.json();\n    }\n  }\n  static {\n    this.ɵfac = function HttpService_Factory(t) {\n      return new (t || HttpService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.EmitterService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpService,\n      factory: HttpService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport class methods {\n  static {\n    this.GET = \"GET\";\n  }\n  static {\n    this.POST = \"POST\";\n  }\n  static {\n    this.PUT = \"PUT\";\n  }\n  static {\n    this.DELETE = \"DELETE\";\n  }\n}","map":{"version":3,"mappings":"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","names":["Observable","AppSettingsDto","HttpService","constructor","localStoreService","emitService","baseUrl","method","headerType","body","get","url","isLoading","executeRequest","requestObj","methods","GET","post","POST","JSON","stringify","observer","requestInit","getFetchObject","loaderEmitter","emit","console","log","fetch","then","response","handelResponse","result","status","next","complete","catch","error","headers","postHeaders","getHeaders","request","redirect","referrerPolicy","getBaseHeaders","token","getItem","base","apiKey","Accept","Pragma","json","factory","providedIn"],"sourceRoot":"","sources":["D:\\Nirmal Learning Projects\\BankingTool\\bankingtool.client\\src\\app\\core\\http\\http.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { AppSettingsDto } from '../../dto/app-settings-dto';\r\nimport { EmitterService } from '../emitter.service';\r\nimport { LocalStorageService } from '../local-storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n\r\n  baseUrl = AppSettingsDto.baseUrl;\r\n  constructor(private localStoreService: LocalStorageService, private emitService: EmitterService) { }\r\n  requestObj = (method: string = 'GET', headerType: string = 'DEFAULT', body?: any) =>  {\r\n    return {\r\n     method,\r\n     headerType,\r\n     body\r\n   }\r\n  }\r\n\r\n  get(url: string,isLoading:boolean = true):Observable<any> {\r\n    return this.executeRequest(url, this.requestObj(methods.GET,methods.GET),isLoading);\r\n  }\r\n\r\n  post(url: string, body: any,isLoading:boolean = true):Observable<any> {\r\n    return this.executeRequest(url, this.requestObj(methods.POST, methods.POST, JSON.stringify(body)),isLoading);\r\n  }\r\n\r\n  executeRequest(url:string, requestObj: any,isLoading:boolean):Observable<any> {\r\n    return new Observable((observer: Observer<any>) => {\r\n      let requestInit = this.getFetchObject(requestObj);\r\n      if(isLoading){\r\n        this.emitService.loaderEmitter.emit(true);\r\n      }\r\n      console.log(this.baseUrl + url);\r\n      fetch(this.baseUrl + url, requestInit)\r\n        .then((response:any) => {\r\n          return this.handelResponse(response);\r\n        })\r\n        .then(result => {\r\n          if(!result.status){\r\n            //alart\r\n          }\r\n          if(isLoading){\r\n            this.emitService.loaderEmitter.emit(false);\r\n          }\r\n          observer.next(result);\r\n          observer.complete();\r\n        })\r\n        .catch(error => {\r\n          observer.error(error);\r\n          observer.complete();\r\n        });\r\n    })\r\n  }\r\n\r\n  getFetchObject(requestObj: any) {\r\n    let headers;\r\n    switch (requestObj.headerType) {\r\n      case methods.POST: {\r\n        headers = this.postHeaders()\r\n        break;\r\n      }\r\n      case methods.GET: {\r\n        headers = this.getHeaders()\r\n        break;\r\n      }\r\n      default: {\r\n        headers =this.getHeaders()\r\n      }\r\n    }\r\n    let request: any = {\r\n      method: requestObj.method, // *GET, POST, PUT, DELETE, etc.\r\n      headers,\r\n      redirect: 'follow',\r\n      referrerPolicy: 'no-referrer',\r\n    };\r\n    if (requestObj.body) {\r\n      request.body = requestObj.body;\r\n    }\r\n    return request;\r\n  }\r\n\r\n  getBaseHeaders() {\r\n    const token = this.localStoreService.getItem('accessToken');\r\n    let base: any = {};\r\n    if (token) {\r\n      base['Authorization'] = `Bearer ${token}`\r\n    }\r\n    if (AppSettingsDto.apiKey) {\r\n      base['ApiKey'] = AppSettingsDto.apiKey;\r\n    }\r\n    return base;\r\n  }\r\n\r\n  getHeaders() {\r\n    let base: any = this.getBaseHeaders();\r\n    base.Accept = 'application/json';\r\n    base.Pragma = 'no-cache';\r\n    base['Cache-Control'] = 'no-cache';\r\n    return base;\r\n  }\r\n  postHeaders() {\r\n    let base: any = this.getBaseHeaders();\r\n    base.Accept = 'application/json';\r\n    base['Content-Type'] = 'application/json';\r\n    return base;\r\n  }\r\n\r\n  handelResponse(response: any) {\r\n    if (response.status == 403) {\r\n      return response.json();\r\n    } else if (!response || response.status === 204) {\r\n      return;\r\n    } else if (response && response.status >= 500) {\r\n      throw response;\r\n    } else {\r\n      return response.json()\r\n    }\r\n  }\r\n}\r\n\r\nexport class methods {\r\n  public static readonly GET = \"GET\";\r\n  public static readonly POST = \"POST\";\r\n  public static readonly PUT = \"PUT\";\r\n  public static readonly DELETE = \"DELETE\";\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}